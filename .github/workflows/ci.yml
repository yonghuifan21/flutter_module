
name: CI
on:
 push:
    branches: 
      - main
jobs:
  build_ios:
    runs-on: macos-latest
    env:
      SHEME: Runner
      BUILD_CONFIGURATION: Release
      ios_out_path: /Users/runner/work/build/flutter-libs/frameworks
    steps:
      # - name: Checkout the code
      #   uses: actions/checkout@v2
      # - name: Install and set Flutter version
      #   uses: subosito/flutter-action@v2
      #   with:
      #     flutter-version: '3.0.5'
      #     channel: 'stable'

      # - name: Flutter clean
      #   run: flutter clean

      # - name: Restore packages
      #   run: flutter pub get

      # - name: Export Framework
      #   run: |
      #     echo '开始创建文件件'
      #     echo $ios_out_path
      #     rm -rf build
      #     flutter build ios-framework --no-profile --no-debug || exit -1 
      #     echo "\n5\. 输出文件到 $ios_out_path"
      #     rm -rf $ios_out_path
      #     mkdir -p $ios_out_path
      #     cp -r build/ios/framework/Release/App.xcframework $ios_out_path
      #     echo 'App.xcframework搬运完成'
      #     if [ -d ${ios_out_path} ]; then
      #           echo "编译成功......"${ios_out_path}
      #     else
      #           echo "编译失败......"${ios_out_path}
      #     fi
    
      - name: Git pull tag
        env: 
          GITHUB_REPO: github.com/yonghuifan21/FlutterModuleSDK.git
          GITHUB_USERNAME: 'yonghuifan21'
          GITHUB_EMAIL: 'andy_yonghui@163.com'
          pat_token: ${{ secrets.PAT_TOKEN_FLUTTER }}
          LOCAL_TOKEN: ${{ secrets.ACC_TOKEN }}
          RSA_TOKEN: ${{ secrets.RSA_TOKEN }}
          RSA_PUB_TOKEN: ${{ secrets.RSA_PUB_TOKEN }}
        run: |
          rm -rf $ios_out_path
          mkdir -p $ios_out_path
          cd $ios_out_path
          git init 
          git config user.name $GITHUB_USERNAME
          git config user.email $GITHUB_EMAIL
          git add .
          git checkout -b release
          echo ${{ secrets.PAT_TOKEN_FLUTTER }}
          at='@'
          http='https://'
          scheme=$GITHUB_USERNAME:$pat_token$at
          echo 'scheme'$scheme
          proj_path=$http$scheme$GITHUB_REPO
          echo '项目地址'$proj_path
          git remote add origin $proj_path
          echo '设置源路径之前'
          git remote -v
          git remote set-url origin $proj_path
          echo '设置源路径之后'
          git remote -v
          touch a.text
          git add .
          git commit -m '11打包提交成功' || echo "No changes, nothing to commit!"
          echo '代码提交成功'
          sudo git push -u -f --force --quiet --set-upstream origin release
          echo "代码推送成功"
          taglist=$(git rev-list --tags --max-count=1)
          getTag=''
          if [ "$taglist" ]
          then
            latestTag=$(git describe --tags `git rev-list --tags --max-count=1`)
            echo "获取到的最新tag" ${latestTag}
            echo '字符串不为空'
            taglist=(${latestTag//\./ })
            echo ${taglist[@]}
            listcount=${#taglist[*]}
            getTag=''
            listcount=$((${#taglist[@]}))
            echo $listcount
            lastIndex=listcount
            let --lastIndex
            echo $lastIndex
            endoftag=${taglist[$lastIndex]}
            echo $endoftag
            endtagint=${endoftag}
            let ++endtagint
            endoftagstr=${endtagint}
            taglist[${listcount}-1]=$endoftagstr
            echo ${taglist[@]}
            pos=0
            for i in $(seq 0 $lastIndex)
            do
              if [ $i -le $lastIndex ]
              then
                getTag="$getTag${taglist[$i]},"
                echo "结束的时候	"$getTag
              else
                getTag=$getTag${taglist[$i]}
                echo "结束的时候"$getTag
              fi
            done
          else 
            echo '字符串为空'
            getTag='1.0.0'
          fi
          echo '$getTag'
          echo "新增的版本号...... ${getTag}"
          git tag ${getTag}
          git push origin ${getTag}
          
