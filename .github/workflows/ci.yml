name: CI
on:
 push:
    branches: 
      - main
jobs:
  build_ios:
    runs-on: macos-latest
    env:
      SHEME: Runner
      BUILD_CONFIGURATION: Release

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      # - name: Install and set Flutter version
      #   uses: subosito/flutter-action@v2
      #   with:
      #     flutter-version: '3.0.5'
      #     channel: 'stable'

      # - name: flutter clean
      #   run: flutter clean

      # - name: Restore packages
      #   run: flutter pub get

      # - name: Create Framework dir
      #   run: |
      #     echo '开始创建文件件'
      #     ios_out_path='/Users/runner/work/build/flutter-libs/frameworks'
      #     echo $ios_out_path
      #     rm -rf build
      #     flutter build ios-framework --no-profile --no-debug || exit -1 
      #     echo "\n5\. 输出文件到 $ios_out_path"
      #     rm -rf $ios_out_path
      #     mkdir -p $ios_out_path
      #     cp -r build/ios/framework/Release/App.xcframework $ios_out_path
      #     echo 'App.xcframework搬运完成'
      #     if [ -d ${ios_out_path} ]; then
      #           echo "编译成功......"${ios_out_path}
      #     else
      #           echo "编译失败......"${ios_out_path}
      #     fi
      - name: git pull App.framework 
        env: 
          #github 仓库地址
          GITHUB_REPO: github.com/yonghuifan21/FlutterModuleSDK.git
        run: | 
          ios_out_path='/Users/work/build/flutter-libs/frameworks'
          rm -rf $ios_out_path
          sudo mkdir -p $ios_out_path
          cd $ios_out_path && git init & git add .
          git config user.name "yonghuifan21"
          git config user.email "andy_yonghui@163.com"
          git add .
          git checkout -b release
          git remote -v
          git remote add origin "https://${{ secrets.ACCESS_TOKEN }}@$GITHUB_REPO"
          git commit -m "GitHub Actions Auto Builder Framworks at $(date +'%Y-%m-%d %H:%M:%S')"
          git pull
          git push --force --quiet "https://${{ secrets.ACCESS_TOKEN }}@$GITHUB_REPO" release
          LatestTag=`git describe --tags `git rev-list --tags --grep prod --max-count=1`
          indexdot=`echo "$LatestTag" | awk -F ''$.'' '{printf "%d", length($0)-length($NF)}'`
          endStr=${string:$(indexdot+1)}
          echo "获取到的tag最后几位 ${endStr}""
          endtagint = {{endStr}}+1
          echo "修改之后的tag ${endtagint}"
          getTag=${${LatestTag}/%${endStr}/${endtagint}}
          echo "新增的版本号...... ${getTag}"
          git tag ${getTag}
          git push origin ${getTag}

